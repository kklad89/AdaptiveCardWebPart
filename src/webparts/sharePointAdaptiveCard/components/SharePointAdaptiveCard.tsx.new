import * as React from 'react';
import styles from './SharePointAdaptiveCard.module.scss';
import type { ISharePointAdaptiveCardProps } from './ISharePointAdaptiveCardProps';
import { AdaptiveCardRenderer } from './AdaptiveCardRenderer';
import { DefaultButton, PrimaryButton, Stack } from '@fluentui/react';
import { ICardData } from './interfaces';
import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';

interface IState {
  cards: ICardData[];
  isCustomizing: boolean;
  defaultLayout: ICardData[];
}

export default class SharePointAdaptiveCard extends React.Component<ISharePointAdaptiveCardProps, IState> {
  private readonly _vacationCardJson = JSON.stringify({
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "type": "AdaptiveCard",
    "version": "1.5",
    "body": [
      {
        "type": "TextBlock",
        "text": "🏖️ Vakantiedagen",
        "size": "Large",
        "weight": "Bolder",
        "spacing": "none"
      },
      {
        "type": "Chart",
        "spacing": "none",
        "chartData": {
          "type": "doughnut",
          "data": {
            "datasets": [
              {
                "data": [22, 1, 2],
                "backgroundColor": [
                  "rgba(0, 138, 41, 1)",
                  "rgba(186, 69, 118, 1)",
                  "rgba(230, 172, 0, 1)"
                ],
                "borderColor": [
                  "rgba(0, 138, 41, 1)",
                  "rgba(186, 69, 118, 1)",
                  "rgba(230, 172, 0, 1)"
                ],
                "borderWidth": 1
              }
            ]
          },
          "options": {
            "responsive": true,
            "maintainAspectRatio": false,
            "cutout": "70%",
            "plugins": {
              "legend": {
                "display": false
              },
              "doughnutLabel": {
                "display": true,
                "color": "#333333",
                "font": {
                  "size": 20,
                  "weight": "bold",
                  "family": "Segoe UI"
                }
              }
            }
          }
        }
      }
    ]
  });

  constructor(props: ISharePointAdaptiveCardProps) {
    super(props);
    this.state = {
      cards: [
        {
          id: 'vacation',
          position: { row: 0, column: 0 },
          json: this._vacationCardJson
        },
        {
          id: 'fixed',
          position: { row: 0, column: 3 },
          json: '',
          isFixed: true
        }
      ],
      isCustomizing: false,
      defaultLayout: []
    };
  }

  private _onDragEnd = (result: DropResult): void => {
    if (!result.destination) return;

    const cards = [...this.state.cards];
    const sourceIdx = cards.findIndex(c => c.id === result.draggableId);
    const destinationPos = {
      row: Math.floor(parseInt(result.destination.droppableId) / 4),
      column: parseInt(result.destination.droppableId) % 4
    };

    if (cards[sourceIdx]) {
      cards[sourceIdx].position = destinationPos;
      this.setState({ cards });
    }
  };

  private _toggleCustomization = (): void => {
    this.setState(prevState => ({
      isCustomizing: !prevState.isCustomizing,
      defaultLayout: !prevState.isCustomizing ? [...prevState.cards] : prevState.defaultLayout
    }));
  };

  private _addNewCard = (): void => {
    // Implement add new card logic
  };

  private _saveLayout = (): void => {
    // Implement save layout logic
    this._toggleCustomization();
  };

  private _resetLayout = (): void => {
    this.setState({
      cards: [...this.state.defaultLayout],
      isCustomizing: false
    });
  };

  private _renderCustomizationButtons = (): JSX.Element => {
    return (
      <Stack horizontal tokens={{ childrenGap: 8 }} className={styles.customizationButtons}>
        <PrimaryButton onClick={this._addNewCard}>Add New Card</PrimaryButton>
        <PrimaryButton onClick={this._saveLayout}>Save</PrimaryButton>
        <DefaultButton onClick={this._resetLayout}>Reset</DefaultButton>
        <DefaultButton onClick={this._toggleCustomization}>Cancel</DefaultButton>
      </Stack>
    );
  };

  public render(): JSX.Element {
    const { hasTeamsContext } = this.props;
    const { cards, isCustomizing } = this.state;

    return (
      <section className={\`\${styles.sharePointAdaptiveCard} \${hasTeamsContext ? styles.teams : ''}\`}>
        {!isCustomizing ? (
          <DefaultButton 
            className={styles.customizeButton}
            onClick={this._toggleCustomization}
          >
            Customize
          </DefaultButton>
        ) : this._renderCustomizationButtons()}

        <DragDropContext onDragEnd={this._onDragEnd}>
          <div className={styles.gridContainer}>
            {Array.from({ length: 8 }).map((_, index) => {
              const row = Math.floor(index / 4);
              const column = index % 4;
              const card = cards.find(c => 
                c.position.row === row && 
                c.position.column === column
              );
              const isSecondRow = row === 1;
              const hasSecondRowContent = cards.some(c => c.position.row === 1);

              if (isSecondRow && !hasSecondRowContent) return null;

              return (
                <Droppable
                  key={index}
                  droppableId={index.toString()}
                  isDropDisabled={column === 3 && row === 0}
                >
                  {(provided, snapshot) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.droppableProps}
                      className={\`\${styles.gridItem} \${
                        snapshot.isDraggingOver ? styles.dropTarget : ''
                      } \${!card ? styles.empty : ''} \${
                        card?.isFixed ? styles.fixed : styles.draggable
                      }\`}
                    >
                      {card ? (
                        <Draggable
                          draggableId={card.id}
                          index={index}
                          isDragDisabled={card.isFixed || !isCustomizing}
                        >
                          {(provided) => (
                            <div
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                            >
                              <AdaptiveCardRenderer
                                adaptiveCardJson={card.json}
                                onError={(error) => console.error('Adaptive Card Error:', error)}
                              />
                            </div>
                          )}
                        </Draggable>
                      ) : (
                        isCustomizing && <span>Drop card here</span>
                      )}
                      {provided.placeholder}
                    </div>
                  )}
                </Droppable>
              );
            })}
          </div>
        </DragDropContext>
      </section>
    );
  }
}
